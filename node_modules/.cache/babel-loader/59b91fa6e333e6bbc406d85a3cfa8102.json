{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { readDeck } from \"../utils/api/index\";\n\nfunction CardEdit() {\n  _s();\n\n  const [card, setCard] = useState([]);\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const data = await readDeck(deckId);\n        setCard(data.cards);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    loadData();\n  }, [deckId]);\n}\n\n_s(CardEdit, \"Fp9/jV2tF+vEAJiSnRvx0sXaQt4=\", false, function () {\n  return [useParams];\n});\n\n_c = CardEdit;\nexport default CardEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardEdit\");","map":{"version":3,"sources":["/Users/brennanpollock/Desktop/flashcard-project/Project_Flashcards_Qualified_1/src/components/CardEdit.js"],"names":["React","useState","useEffect","useParams","readDeck","CardEdit","card","setCard","deckId","loadData","data","cards","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;;AAGA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAACO,IAAAA;AAAD,MAAWL,SAAS,EAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACR,mBAAeO,QAAf,GAA0B;AACtB,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACI,MAAD,CAA3B;AACAD,QAAAA,OAAO,CAACG,IAAI,CAACC,KAAN,CAAP;AACC,OAHL,CAIA,OAAMC,KAAN,EAAa;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AACLH,IAAAA,QAAQ;AACX,GAXQ,EAWP,CAACD,MAAD,CAXO,CAAT;AAgBH;;GApBQH,Q;UAEYF,S;;;KAFZE,Q;AAsBT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport {readDeck} from \"../utils/api/index\";\n\n\nfunction CardEdit() {\n    const [card, setCard] = useState([]);\n    const {deckId} = useParams();\n\n    useEffect(() => {\n            async function loadData() {\n                try {\n                    const data = await readDeck(deckId);\n                    setCard(data.cards)\n                    }\n                catch(error) { \n                    console.log(error) \n                }\n            }\n        loadData();\n    },[deckId])\n\n\n    \n\n}\n\nexport default CardEdit;"]},"metadata":{},"sourceType":"module"}