{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nfunction DeckInfo() {\n  _s();\n\n  const [cards, setCards] = useState({});\n  const [deck, setDeck] = useState({});\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    setCards({});\n\n    async function loadData() {\n      try {\n        const data = await readDeck(deckId);\n        setDeck(data);\n        setCards(data.cards);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    loadData();\n  }, [deckId]);\n}\n\n_s(DeckInfo, \"ykBsP1zuqRqrjMxuZ3D/OU3VGb4=\", false, function () {\n  return [useParams];\n});\n\n_c = DeckInfo;\nexport default DeckInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckInfo\");","map":{"version":3,"sources":["/Users/brennanpollock/Desktop/flashcard-project/Project_Flashcards_Qualified_1/src/components/DeckInfo.js"],"names":["React","useState","useParams","DeckInfo","cards","setCards","deck","setDeck","deckId","useEffect","loadData","data","readDeck","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAGA,SAASC,QAAT,GAAmB;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAACO,IAAAA;AAAD,MAAWN,SAAS,EAA1B;AAEAO,EAAAA,SAAS,CAAC,MAAM;AACRJ,IAAAA,QAAQ,CAAC,EAAD,CAAR;;AACA,mBAAeK,QAAf,GAA0B;AACtB,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMC,QAAQ,CAACJ,MAAD,CAA3B;AACAD,QAAAA,OAAO,CAACI,IAAD,CAAP;AACAN,QAAAA,QAAQ,CAACM,IAAI,CAACP,KAAN,CAAR;AACC,OAJL,CAKA,OAAMS,KAAN,EAAa;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AACLH,IAAAA,QAAQ;AACX,GAbQ,EAaP,CAACF,MAAD,CAbO,CAAT;AAmBH;;GAxBQL,Q;UAGYD,S;;;KAHZC,Q;AA0BT,eAAeA,QAAf","sourcesContent":["import React, {useState} from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n\nfunction DeckInfo(){\n    const [cards, setCards] = useState({});\n    const [deck, setDeck] = useState({});\n    const {deckId} = useParams();\n\n    useEffect(() => {\n            setCards({});\n            async function loadData() {\n                try {\n                    const data = await readDeck(deckId);\n                    setDeck(data)\n                    setCards(data.cards)\n                    }\n                catch(error) { \n                    console.log(error) \n                }\n            }\n        loadData();\n    },[deckId])\n\n\n\n    \n\n}\n\nexport default DeckInfo;"]},"metadata":{},"sourceType":"module"}