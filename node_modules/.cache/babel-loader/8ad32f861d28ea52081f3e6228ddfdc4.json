{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { readDeck } from \"../utils/api/index\";\n\nfunction Study({\n  decks,\n  setDecks\n}) {\n  _s();\n\n  const [cards, setCards] = useState({});\n  const {\n    deckId\n  } = useParams(); //use readDeck from utils\n\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const data = await readDeck(deckId);\n        setCards(data.cards);\n      } catch (error) {\n        throw error;\n      }\n    }\n  }, []);\n}\n\n_s(Study, \"V7RXZ5J8PpcOJBFbHXzfwJw2QkU=\", false, function () {\n  return [useParams];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/brennanpollock/Desktop/flashcard-project/Project_Flashcards_Qualified_1/src/components/Study.js"],"names":["React","useEffect","useState","useParams","readDeck","Study","decks","setDecks","cards","setCards","deckId","loadData","data","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;;AAEA,SAASC,KAAT,CAAe;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAf,EAAkC;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAWP,SAAS,EAA1B,CAF8B,CAG9B;;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACR,mBAAeU,QAAf,GAA0B;AACtB,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACM,MAAD,CAA3B;AACAD,QAAAA,QAAQ,CAACG,IAAI,CAACJ,KAAN,CAAR;AACC,OAHL,CAIA,OAAMK,KAAN,EAAa;AAAE,cAAMA,KAAN;AAAa;AACnC;AAIJ,GAXQ,EAWP,EAXO,CAAT;AAiBH;;GAtBQR,K;UAEYF,S;;;KAFZE,K;AAwBT,eAAeA,KAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { useParams } from \"react-router\";\nimport {readDeck} from \"../utils/api/index\";\n\nfunction Study({decks, setDecks}) {\n    const [cards, setCards] = useState({});\n    const {deckId} = useParams();\n    //use readDeck from utils\n\n    useEffect(() => {\n            async function loadData() {\n                try {\n                    const data = await readDeck(deckId);\n                    setCards(data.cards)\n                    }\n                catch(error) { throw error }\n        }\n\n\n\n    },[])\n\n\n\n\n\n}\n\nexport default Study;"]},"metadata":{},"sourceType":"module"}