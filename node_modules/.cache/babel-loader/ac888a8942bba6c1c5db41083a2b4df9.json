{"ast":null,"code":"var _jsxFileName = \"/Users/brennanpollock/Desktop/flashcard-project/Project_Flashcards_Qualified_1/src/components/Study.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { readDeck } from \"../utils/api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Study() {\n  _s();\n\n  const [cards, setCards] = useState({});\n  const [deck, setDeck] = useState();\n  const [cardIndex, setCardIndex] = useState(0);\n  const {\n    deckId\n  } = useParams(); //use readDeck from utils\n\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const data = await readDeck(deckId);\n        setDeck(data);\n        setCards(data.cards);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    loadData();\n  }, [deckId]);\n\n  if (cards.length > 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Study: \", deck.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"card-title\",\n          children: [\"Card \", cardIndex + 1, \" of \", cards.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Study, \"Hx7bHCiWEjUlLJ3DmI+0QJqcJsM=\", false, function () {\n  return [useParams];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/brennanpollock/Desktop/flashcard-project/Project_Flashcards_Qualified_1/src/components/Study.js"],"names":["React","useEffect","useState","useParams","readDeck","Study","cards","setCards","deck","setDeck","cardIndex","setCardIndex","deckId","loadData","data","error","console","log","length","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAACU,IAAAA;AAAD,MAAWT,SAAS,EAA1B,CAJa,CAKb;;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACR,mBAAeY,QAAf,GAA0B;AACtB,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACQ,MAAD,CAA3B;AACAH,QAAAA,OAAO,CAACK,IAAD,CAAP;AACAP,QAAAA,QAAQ,CAACO,IAAI,CAACR,KAAN,CAAR;AACC,OAJL,CAKA,OAAMS,KAAN,EAAa;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AACLF,IAAAA,QAAQ;AACX,GAZQ,EAYP,CAACD,MAAD,CAZO,CAAT;;AAeA,MAAGN,KAAK,CAACY,MAAN,GAAe,CAAlB,EAAqB;AACjB,wBACI;AAAA,8BACI;AAAA,8BAAYV,IAAI,CAACW,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACI;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA,8BAAiCT,SAAS,GAAG,CAA7C,UAAoDJ,KAAK,CAACY,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;AAKJ;;GApCQb,K;UAIYF,S;;;KAJZE,K;AAsCT,eAAeA,KAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { useParams } from \"react-router\";\nimport {readDeck} from \"../utils/api/index\";\n\nfunction Study() {\n    const [cards, setCards] = useState({});\n    const [deck, setDeck] = useState();\n    const [cardIndex, setCardIndex] = useState(0);\n    const {deckId} = useParams();\n    //use readDeck from utils\n\n    useEffect(() => {\n            async function loadData() {\n                try {\n                    const data = await readDeck(deckId);\n                    setDeck(data)\n                    setCards(data.cards)\n                    }\n                catch(error) { \n                    console.log(error) \n                }\n            }\n        loadData();\n    },[deckId])\n\n\n    if(cards.length > 2) {\n        return (\n            <div>\n                <h2>Study: {deck.name}</h2>\n                <div className=\"card\">\n                    <h4 className=\"card-title\">Card {cardIndex + 1} of {cards.length}</h4>\n                </div>\n            </div>\n        )\n    }\n\n\n\n\n}\n\nexport default Study;"]},"metadata":{},"sourceType":"module"}